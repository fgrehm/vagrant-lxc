#!/usr/bin/env bash

# This is a modified version of /usr/share/lxc/templates/lxc-download
# that comes with ubuntu-lxc 1.0.0 stable from ppa changed to suit vagrant-lxc needs
#
# Copyright © 2014 Stéphane Graber <stgraber@ubuntu.com>
# Copyright © 2014 Fábio Rehm <fgrehm@gmail.com>
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.

#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.

#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
#  USA

set -eu

LXC_HOOK_DIR="/usr/share/lxc/hooks"
LXC_TEMPLATE_CONFIG="/usr/share/lxc/config"

LXC_MAPPED_GID=
LXC_MAPPED_UID=
LXC_NAME=
LXC_PATH=
LXC_ROOTFS=
LXC_TARBALL=
LXC_CONFIG=
LXC_STRIP_COMPONENTS=2

usage() {
    cat <<EOF
vagrant-lxc default template

Required arguments:
[ --tarball <path> ]: The full path of the rootfs tarball

Optional arguments:
[ --config ]: Configuration file to be used when building the container
[ -h | --help ]: This help message

LXC internal arguments (do not pass manually!):
[ --name <name> ]: The container name
[ --path <path> ]: The path to the container
[ --rootfs <rootfs> ]: The path to the container's rootfs
[ --mapped-uid <map> ]: A uid map (user namespaces)
[ --mapped-gid <map> ]: A gid map (user namespaces)
[ --strip-components <num> ]: Number of path components to strip from tarball
EOF
    return 0
}

options=$(getopt -o h -l tarball:,config:,help:,name:,path:,rootfs:,mapped-uid:,mapped-gid:,strip-components: -- "$@")SS

if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
        -h|--help)          usage $0 && exit 0;;
        --config)           LXC_CONFIG=$2; shift 2;;
        --tarball)          LXC_TARBALL=$2; shift 2;;
        --name)             LXC_NAME=$2; shift 2;;
        --path)             LXC_PATH=$2; shift 2;;
        --rootfs)           LXC_ROOTFS=$2; shift 2;;
        --mapped-uid)       LXC_MAPPED_UID=$2; shift 2;;
        --mapped-gid)       LXC_MAPPED_GID=$2; shift 2;;
        --strip-components) LXC_STRIP_COMPONENTS=$2; shift 2;;
        *)                  break;;
    esac
done

if [ -z "${LXC_NAME}" ]; then
    echo "'name' parameter is required"
    exit 1
fi

if [ -z "${LXC_TARBALL}" ]; then
    echo "'tarball' parameter is required"
    exit 1
fi

if [ -z "${LXC_PATH}" ]; then
    echo "'path' parameter is required"
    exit 1
fi

# if $LXC_ROOTFS exists here, it was passed in with --rootfs
if [ -z "${LXC_ROOTFS}" ]; then
    config=${LXC_PATH}/config
    if grep -q '^lxc.rootfs' $config 2>/dev/null ; then
        LXC_ROOTFS=`grep 'lxc.rootfs =' $config | awk -F= '{ print $2 }'`
    else
        LXC_ROOTFS=$LXC_PATH/rootfs
        echo "lxc.rootfs = ${LXC_ROOTFS}" >> $config
    fi
fi

# Unpack the rootfs
echo "Unpacking the rootfs"

(
    flock -x 200
    if [ $? -ne 0 ]; then
        echo "Cache repository is busy."
        exit 1
    fi

    mkdir -p ${LXC_ROOTFS}
    (cd ${LXC_ROOTFS} && tar xfz ${LXC_TARBALL} --strip-components=${LXC_STRIP_COMPONENTS} --xattrs --xattrs-include=* || true)
    if [ ! -f ${LXC_ROOTFS}/bin/true ]; then
        echo "Failed to extract rootfs"
        exit 1
    fi

) 200>${LXC_PATH}/vagrant_lock
rm ${LXC_PATH}/vagrant_lock

mkdir -p ${LXC_ROOTFS}/dev/pts/

## Extract all the network config entries
sed -i -e "/lxc.network/{w ${LXC_PATH}/config-network" -e "d}" \
    ${LXC_PATH}/config

## Extract any other config entry
sed -i -e "/lxc./{w ${LXC_PATH}/config-auto" -e "d}" ${LXC_PATH}/config

## Add the container-specific config
echo "" >> ${LXC_PATH}/config
echo "##############################################" >> ${LXC_PATH}/config
echo "# Container specific configuration (automatically set)" >> ${LXC_PATH}/config
if [ -e "${LXC_PATH}/config-auto" ]; then
    cat ${LXC_PATH}/config-auto >> ${LXC_PATH}/config
    rm ${LXC_PATH}/config-auto
fi
echo "lxc.uts.name = ${LXC_NAME}" >> ${LXC_PATH}/config

## Re-add the previously removed network config
if [ -e "${LXC_PATH}/config-network" ]; then
    echo "" >> ${LXC_PATH}/config
    echo "##############################################" >> ${LXC_PATH}/config
    echo "# Network configuration (automatically set)" >> ${LXC_PATH}/config
    cat ${LXC_PATH}/config-network >> ${LXC_PATH}/config
    rm ${LXC_PATH}/config-network
fi

if [ -n "${LXC_CONFIG}" ]; then
    ## Append the defaults
    echo "" >> ${LXC_PATH}/config
    echo "##############################################" >> ${LXC_PATH}/config
    echo "# vagrant-lxc base box specific configuration" >> ${LXC_PATH}/config
    cat ${LXC_CONFIG} >> ${LXC_PATH}/config
fi

# Empty section for lxc.customize calls from vagrantfile
echo "" >> ${LXC_PATH}/config
echo "##############################################" >> ${LXC_PATH}/config
echo "# vagrant-lxc container specific configuration" >> ${LXC_PATH}/config

exit 0
